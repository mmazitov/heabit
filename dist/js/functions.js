const popup=document.querySelector(".popup"),firstStep=document.querySelector(".popup.first-step"),secondStep=document.querySelector(".popup.second-step"),body=document.body;document.addEventListener("DOMContentLoaded",(()=>{initializeFormValidation(),initializePopupActions()}));const initializeFormValidation=()=>{const e=document.querySelector(".form.subscribe"),t=e.querySelector(".input.mail");e.addEventListener("submit",(i=>{i.preventDefault(),clearErrors();let o=!0;t.value.trim()&&isValidEmail(t.value)||(showError(t),o=!1),o&&(alert("Form submitted successfully!"),firstStep.classList.remove("visible"),secondStep.classList.add("visible"),e.reset())}))},isValidEmail=e=>/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(e),showError=e=>{e.classList.add("error")},clearErrors=()=>{document.querySelectorAll(".input.error").forEach((e=>{e.classList.remove("error")})),document.querySelectorAll(".error-message").forEach((e=>{e.remove()}))},initializePopupActions=()=>{initializeOpenPopup(),initializeClosePopup()},initializeOpenPopup=()=>{document.querySelector(".btn.open").addEventListener("click",(e=>{e.preventDefault(),firstStep.classList.add("visible"),body.classList.add("popup-visible")}))},initializeClosePopup=()=>{document.querySelectorAll(".btn.close").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),closePopup()}))})),document.addEventListener("click",(e=>{popup&&!popup.contains(e.target)&&!e.target.closest(".btn.open")&&body.classList.contains("popup-visible")&&closePopup()})),document.addEventListener("keydown",(e=>{"Escape"===e.key&&body.classList.contains("popup-visible")&&closePopup()}))},closePopup=()=>{firstStep?.classList.remove("visible"),secondStep?.classList.remove("visible"),body.classList.remove("popup-visible")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25zLmpzIiwibmFtZXMiOlsicG9wdXAiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJmaXJzdFN0ZXAiLCJzZWNvbmRTdGVwIiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0aWFsaXplRm9ybVZhbGlkYXRpb24iLCJpbml0aWFsaXplUG9wdXBBY3Rpb25zIiwiZm9ybSIsImVtYWlsSW5wdXQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY2xlYXJFcnJvcnMiLCJpc1ZhbGlkIiwidmFsdWUiLCJ0cmltIiwiaXNWYWxpZEVtYWlsIiwic2hvd0Vycm9yIiwiYWxlcnQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJyZXNldCIsImVtYWlsIiwidGVzdCIsImlucHV0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJtZXNzYWdlIiwiaW5pdGlhbGl6ZU9wZW5Qb3B1cCIsImluaXRpYWxpemVDbG9zZVBvcHVwIiwiYnV0dG9uIiwiY2xvc2VQb3B1cCIsImNvbnRhaW5zIiwidGFyZ2V0IiwiY2xvc2VzdCIsImtleSJdLCJzb3VyY2VzIjpbImZ1bmN0aW9ucy5qcyJdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsTUFBUUMsU0FBU0MsY0FBYyxVQUMvQkMsVUFBWUYsU0FBU0MsY0FBYyxxQkFDbkNFLFdBQWFILFNBQVNDLGNBQWMsc0JBQ3BDRyxLQUFPSixTQUFTSSxLQUd0QkosU0FBU0ssaUJBQWlCLG9CQUFvQixLQUM3Q0MsMkJBQ0FDLHdCQUF3QixJQU16QixNQUFNRCx5QkFBMkIsS0FDaEMsTUFBTUUsRUFBT1IsU0FBU0MsY0FBYyxtQkFDOUJRLEVBQWFELEVBQUtQLGNBQWMsZUFFdENPLEVBQUtILGlCQUFpQixVQUFXSyxJQUNoQ0EsRUFBTUMsaUJBQ05DLGNBRUEsSUFBSUMsR0FBVSxFQUdUSixFQUFXSyxNQUFNQyxRQUdWQyxhQUFhUCxFQUFXSyxTQUZuQ0csVUFBVVIsR0FDVkksR0FBVSxHQU9QQSxJQUNISyxNQUFNLGdDQUNOaEIsVUFBVWlCLFVBQVVDLE9BQU8sV0FDM0JqQixXQUFXZ0IsVUFBVUUsSUFBSSxXQUN6QmIsRUFBS2MsUUFDTixHQUNDLEVBUUdOLGFBQWdCTyxHQUNGLG1EQUNEQyxLQUFLRCxHQU9sQk4sVUFBYVEsSUFDbEJBLEVBQU1OLFVBQVVFLElBQUksUUFBUSxFQU12QlQsWUFBYyxLQUVuQlosU0FBUzBCLGlCQUFpQixnQkFBZ0JDLFNBQVNGLElBQ2xEQSxFQUFNTixVQUFVQyxPQUFPLFFBQVEsSUFJaENwQixTQUFTMEIsaUJBQWlCLGtCQUFrQkMsU0FBU0MsSUFDcERBLEVBQVFSLFFBQVEsR0FDZixFQU1HYix1QkFBeUIsS0FDOUJzQixzQkFDQUMsc0JBQXNCLEVBTWpCRCxvQkFBc0IsS0FDUjdCLFNBQVNDLGNBQWMsYUFDL0JJLGlCQUFpQixTQUFVSyxJQUNyQ0EsRUFBTUMsaUJBQ05ULFVBQVVpQixVQUFVRSxJQUFJLFdBQ3hCakIsS0FBS2UsVUFBVUUsSUFBSSxnQkFBZ0IsR0FDbEMsRUFNR1MscUJBQXVCLEtBQ1A5QixTQUFTMEIsaUJBQWlCLGNBR2xDQyxTQUFTSSxJQUNyQkEsRUFBTzFCLGlCQUFpQixTQUFVSyxJQUNqQ0EsRUFBTUMsaUJBQ05xQixZQUFZLEdBQ1gsSUFJSGhDLFNBQVNLLGlCQUFpQixTQUFVSyxJQUVsQ1gsUUFDQ0EsTUFBTWtDLFNBQVN2QixFQUFNd0IsVUFDckJ4QixFQUFNd0IsT0FBT0MsUUFBUSxjQUN0Qi9CLEtBQUtlLFVBQVVjLFNBQVMsa0JBRXhCRCxZQUNELElBR0RoQyxTQUFTSyxpQkFBaUIsV0FBWUssSUFDbkIsV0FBZEEsRUFBTTBCLEtBQW9CaEMsS0FBS2UsVUFBVWMsU0FBUyxrQkFDckRELFlBQ0QsR0FDQyxFQU1HQSxXQUFhLEtBQ2xCOUIsV0FBV2lCLFVBQVVDLE9BQU8sV0FDNUJqQixZQUFZZ0IsVUFBVUMsT0FBTyxXQUM3QmhCLEtBQUtlLFVBQVVDLE9BQU8sZ0JBQWdCIiwiaWdub3JlTGlzdCI6W10sInNvdXJjZXNDb250ZW50IjpbIi8vIENhY2hlIERPTSBlbGVtZW50cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG5jb25zdCBwb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBcIik7XG5jb25zdCBmaXJzdFN0ZXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLmZpcnN0LXN0ZXBcIik7XG5jb25zdCBzZWNvbmRTdGVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cC5zZWNvbmQtc3RlcFwiKTtcbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuXG4vLyBJbml0aWFsaXplIGZ1bmN0aW9uYWxpdHkgd2hlbiB0aGUgRE9NIGlzIGZ1bGx5IGxvYWRlZFxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuXHRpbml0aWFsaXplRm9ybVZhbGlkYXRpb24oKTtcblx0aW5pdGlhbGl6ZVBvcHVwQWN0aW9ucygpO1xufSk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgZm9ybSB2YWxpZGF0aW9uIGZvciB0aGUgc3Vic2NyaXB0aW9uIGZvcm0uXG4gKi9cbmNvbnN0IGluaXRpYWxpemVGb3JtVmFsaWRhdGlvbiA9ICgpID0+IHtcblx0Y29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybS5zdWJzY3JpYmVcIik7XG5cdGNvbnN0IGVtYWlsSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIuaW5wdXQubWFpbFwiKTtcblxuXHRmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2ZW50KSA9PiB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBkZWZhdWx0IGZvcm0gc3VibWlzc2lvblxuXHRcdGNsZWFyRXJyb3JzKCk7IC8vIENsZWFyIGFueSBleGlzdGluZyB2YWxpZGF0aW9uIGVycm9yc1xuXG5cdFx0bGV0IGlzVmFsaWQgPSB0cnVlO1xuXG5cdFx0Ly8gVmFsaWRhdGUgZW1haWwgaW5wdXRcblx0XHRpZiAoIWVtYWlsSW5wdXQudmFsdWUudHJpbSgpKSB7XG5cdFx0XHRzaG93RXJyb3IoZW1haWxJbnB1dCk7XG5cdFx0XHRpc1ZhbGlkID0gZmFsc2U7XG5cdFx0fSBlbHNlIGlmICghaXNWYWxpZEVtYWlsKGVtYWlsSW5wdXQudmFsdWUpKSB7XG5cdFx0XHRzaG93RXJyb3IoZW1haWxJbnB1dCk7XG5cdFx0XHRpc1ZhbGlkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdmFsaWRhdGlvbiBwYXNzZXMsIHByb2NlZWQgdG8gdGhlIG5leHQgc3RlcFxuXHRcdGlmIChpc1ZhbGlkKSB7XG5cdFx0XHRhbGVydChcIkZvcm0gc3VibWl0dGVkIHN1Y2Nlc3NmdWxseSFcIik7XG5cdFx0XHRmaXJzdFN0ZXAuY2xhc3NMaXN0LnJlbW92ZShcInZpc2libGVcIik7XG5cdFx0XHRzZWNvbmRTdGVwLmNsYXNzTGlzdC5hZGQoXCJ2aXNpYmxlXCIpO1xuXHRcdFx0Zm9ybS5yZXNldCgpOyAvLyBSZXNldCBmb3JtIGZpZWxkc1xuXHRcdH1cblx0fSk7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlcyBhbiBlbWFpbCBhZGRyZXNzIHVzaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IGVtYWlsIC0gVGhlIGVtYWlsIGFkZHJlc3MgdG8gdmFsaWRhdGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgaWYgdGhlIGVtYWlsIGlzIHZhbGlkLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmNvbnN0IGlzVmFsaWRFbWFpbCA9IChlbWFpbCkgPT4ge1xuXHRjb25zdCBlbWFpbFJlZ2V4ID0gL15bYS16QS1aMC05Ll8lKy1dK0BbYS16QS1aMC05Li1dK1xcLlthLXpBLVpdezIsfSQvO1xuXHRyZXR1cm4gZW1haWxSZWdleC50ZXN0KGVtYWlsKTtcbn07XG5cbi8qKlxuICogRGlzcGxheXMgYSB2YWxpZGF0aW9uIGVycm9yIG9uIGFuIGlucHV0IGZpZWxkLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaW5wdXQgLSBUaGUgaW5wdXQgZWxlbWVudCB0byBtYXJrIGFzIGludmFsaWQuXG4gKi9cbmNvbnN0IHNob3dFcnJvciA9IChpbnB1dCkgPT4ge1xuXHRpbnB1dC5jbGFzc0xpc3QuYWRkKFwiZXJyb3JcIik7XG59O1xuXG4vKipcbiAqIENsZWFycyBhbGwgdmFsaWRhdGlvbiBlcnJvcnMgZnJvbSB0aGUgZm9ybS5cbiAqL1xuY29uc3QgY2xlYXJFcnJvcnMgPSAoKSA9PiB7XG5cdC8vIFJlbW92ZSBlcnJvciBjbGFzcyBmcm9tIGFsbCBpbnB1dHNcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pbnB1dC5lcnJvclwiKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuXHRcdGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoXCJlcnJvclwiKTtcblx0fSk7XG5cblx0Ly8gUmVtb3ZlIGFsbCBlcnJvciBtZXNzYWdlcyAoaWYgYW55KVxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmVycm9yLW1lc3NhZ2VcIikuZm9yRWFjaCgobWVzc2FnZSkgPT4ge1xuXHRcdG1lc3NhZ2UucmVtb3ZlKCk7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBwb3B1cCBvcGVuIGFuZCBjbG9zZSBhY3Rpb25zLlxuICovXG5jb25zdCBpbml0aWFsaXplUG9wdXBBY3Rpb25zID0gKCkgPT4ge1xuXHRpbml0aWFsaXplT3BlblBvcHVwKCk7XG5cdGluaXRpYWxpemVDbG9zZVBvcHVwKCk7XG59O1xuXG4vKipcbiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIGhhbmRsZSBvcGVuaW5nIHRoZSBwb3B1cC5cbiAqL1xuY29uc3QgaW5pdGlhbGl6ZU9wZW5Qb3B1cCA9ICgpID0+IHtcblx0Y29uc3Qgb3BlbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLm9wZW5cIik7XG5cdG9wZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Zmlyc3RTdGVwLmNsYXNzTGlzdC5hZGQoXCJ2aXNpYmxlXCIpO1xuXHRcdGJvZHkuY2xhc3NMaXN0LmFkZChcInBvcHVwLXZpc2libGVcIik7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byBoYW5kbGUgY2xvc2luZyB0aGUgcG9wdXAuXG4gKi9cbmNvbnN0IGluaXRpYWxpemVDbG9zZVBvcHVwID0gKCkgPT4ge1xuXHRjb25zdCBjbG9zZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJ0bi5jbG9zZVwiKTtcblxuXHQvLyBBZGQgZXZlbnQgbGlzdGVuZXIgdG8gYWxsIGNsb3NlIGJ1dHRvbnNcblx0Y2xvc2VCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuXHRcdGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Y2xvc2VQb3B1cCgpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHQvLyBDbG9zZSBwb3B1cCBpZiBjbGlja2luZyBvdXRzaWRlIG9yIHByZXNzaW5nIFwiRXNjYXBlXCJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuXHRcdGlmIChcblx0XHRcdHBvcHVwICYmIFxuXHRcdFx0IXBvcHVwLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgXG5cdFx0XHQhZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIuYnRuLm9wZW5cIikgJiYgXG5cdFx0XHRib2R5LmNsYXNzTGlzdC5jb250YWlucyhcInBvcHVwLXZpc2libGVcIilcblx0XHQpIHtcblx0XHRcdGNsb3NlUG9wdXAoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuXHRcdGlmIChldmVudC5rZXkgPT09IFwiRXNjYXBlXCIgJiYgYm9keS5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cC12aXNpYmxlXCIpKSB7XG5cdFx0XHRjbG9zZVBvcHVwKCk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xvc2luZyBvZiB0aGUgcG9wdXAgYW5kIHJlc2V0dGluZyBzdGF0ZXMuXG4gKi9cbmNvbnN0IGNsb3NlUG9wdXAgPSAoKSA9PiB7XG5cdGZpcnN0U3RlcD8uY2xhc3NMaXN0LnJlbW92ZShcInZpc2libGVcIik7XG5cdHNlY29uZFN0ZXA/LmNsYXNzTGlzdC5yZW1vdmUoXCJ2aXNpYmxlXCIpO1xuXHRib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cC12aXNpYmxlXCIpO1xufTtcbiJdfQ==
